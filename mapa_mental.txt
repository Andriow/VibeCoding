# Vibe Coding e IA no Desenvolvimento de Software
- [Definição e Conceituação]
	- [Origem]
	- [Princípio Central]
		- [Delegar criação/modificação de código à IA]
		- [Orquestrar produção via mediador de IA]
		- [Material Disengagement]
	- [Descrição por Karpathy]
		- [Esquecer que o código existe]
		- [Aceitar tudo, não ler diffs]
		- [Copiar/colar erros (geralmente resolve)]
		- [Código Cresce além da compreensão]
		- [Não é codificação - ver, dizer, executar, copiar/colar]
		- [Funciona "quase sempre"]
	- [Definição Adotada (Pesquisa)]
		- [Programador se autodescreve como vibe coding]
		- [Evita aplicar normas externas]
	- [Paradigma]
		- [Co-criação colaborativa Humano-IA]
		- [Diálogo em linguagem natural]
		- [Mediação da intenção: instrução determinística -> inferência probabilística]
		- [Interpretação co-criativa]
	- [Analogias Inadequadas]
		- [Pesquisa]
		- [Compilação]
		- [Programação em par]
		- [Autocompletar avançado]
- [Fluxo de Trabalho]
	- [Ciclos iterativos de Satisfação de Metas]
		- [Formular meta/sub-meta]
		- [Prompt para geração de código]
		- [Revisar código gerado]
		- [Aceitar ou rejeitar alterações]
		- [Testar alterações na aplicação]
		- [Identificar bugs/melhorias]
		- [Refinar prompt ou depuração manual]
		- [Repetir até satisfazer meta]
	- [Estratégias de Prompting]
		- [Mistura de diretivas vagas e específicas]
		- [Granularidade (alto/baixo nível)]
		- [Refinamento Iterativo]
		- [Linguagem precisa e impresisa]
		- [prompts concisos vs. longos/detalhados]
		- [Foco em chunks menores para reduzir alucinações]
		- [Prompt Engineering]
	- [Avaliação e Depuração]
		- [Verificação iterativa da IA]
		- [Assistência de IA vs. práticas manuais]
		- [Identificação de discrepâncias visuais (UI)]
		- [Ferramentas de desenvolvedor do navegador]
		- [Análise de terminal]
		- [IA como ferramenta de depuração (colar erros)]
		- [Refinamento iterativo via prompts]
		- [Revisão e edição manual do código]
		- [Leitura rápida de diffs e código gerado]
		- [Preparo proativo para próximas iterações]
	- [Transição para Trabalho Manual]
		- [Eficiência (ajustes pequenos)]
		- [Depuração (erros complexos)]
		- [Refinamento]
		- [Modelos difícil de 'guiar']
		- [Preferências individuais]
	- [Confiança nas ferramentas de IA]
		- [Dinâmica e contextual]
		- [Desenvolvida por verificação iterativa]
		- [Menor confiança em code-generated]
- [Impacto na Expertise e Habilidades]
	- [Redistribuição da Expertise]
		- [Gestão de Contexto]
		- [Avaliação rápida de código]
		- [Decisão entre IA e manipulação manual]
		- [Papel de diretor, revisor e editor]
		- [Conhecimento técnico essencial]
	- [Tipos de Expertise Utilizadas]
		- [Conhecimento técnico (BD, linguagens, arquitetura)]
		- [Habilidade de depuração]
		- [Avaliações visuais rápidas de código]
		- [Diagnóstico de bugs complexos]
		- [Seleção de ferramentas e modelos]
		- [Interpretação holística (Gestalt)]
		- [Visualização mental do produto final]
	- [Desafios para Expertise]
		- [Deskilling técnico (pensamento algorítmico, depuração)]
		- [Falsa sensação de competência]
		- [Transferência de conhecimento interrompida]
		- [Nova carga metacognitiva]
	- [Competência Emergente]
		- [Consciência do 'possível']
		- [Capacidade de dar prompt e guiar modelos]
	- [Material Disengagement (Desengajamento Material)]
		- [Programador não trabalha mais no substrato material (código)]
		- [Orquestra produção e edição via mediador de IA]
		- [Pode permitir retorno a substratos materiais mais baixos (JS'vanilla')]
		- [Engajamento com 'resistências produtivas' do modelo]
- [Ferramentas e Ecossistema]
	- [IDEs e Assistentes de Código]
		- [Cursor (plataforma primária)]
		- [Replit (Replit AI, Agent, Assistant)]
		- [GitHub Copilot (VS Code, Neovim, Jetbrains)]
		- [Claude Code CLI (Anthropic)]
		- [OpenAI Codex CLI]
		- [Tabnine]
		- [Augment Code]
		- [Continue.dev]
		- [Aider]
		- [Codename Goose]
	- [Modelos de Linguagem (LLMs)]
		- [OpenAI (GPT-3, GPT-4, GPT4o- o3-mini)]
		- [Anthorpic (Claude 3.5 Sonnet, Claude 3.7 Sonnet, Haiku)]
		- [Google (Gemine 2.0 Flash, Gemini 2.5 Pro)]
		- [Meta (Llama-3 Llhama-4)]
		- [Mistral AI (Mixtral)]
		- [DeepSeek]
		- [xAI]
		- [GROQ]
		- [Ollama (local runtimes)]
	- [Outras Ferramentas/Recusrsos]
		- [Ferramentas de transcrição (voz para prompt)]
		- [Navegador web (pré-visualização, teste)]
		- [Ferramentas de desenvolvedor do navegador]
		- [Terminal]
		- [Excalidraw (planejamento inicial)]
		- [Code Guide (pré-processamento de prompts)]
		- [.cursorrules (templates de prompt)]
		- [Model Context Protocol (MCP)]
		- [Data Version Control (DVC)]
		- [Sistemas de CI/CD (GitHub Actions, GitlLab CI/CD)]
	- [Plataformas Baseadas em Navegador]
		- [Bolt.new (StackBlitz WebContainers)]
		- [Rork (Aplicativos móveis)]
		- [Lazy AI]
		- [Napkins.dev (TypeScript JSX, Tailwind CSS)]
- [Desafios e Limitações]
	- [Alucinações do Modelo]
		- [Nome de pacotes não existentes (Slopsquatting)]
		- [Testes estatisticamente inadequados]
		- [Omissão de tratamento de casos extremos]
		- [Injeção de vulnerabilidades de segurança]
		- [Dificuldade em identificar relações complexas (UML)]
	- [Qualidade de Manutenabilidade do Código]
		- [Acúmulo de Débitos Técnicos]
		- [Código verboso, aninhado e inconsistente]
		- [Falta de testes unitários/documentação]
		- [Difícil de ler, acoplado]
		- [Difícil de depurar]
	- [Privacidade e Segurança de Dados]
		- [Transmissão de dados sensíveis para APIs de terceiros]
		- [Vulnerabilidade de supply-chain]
		- [Perda de IP (código proprietário)]
	- [Lacunas Epistêmicas e de Responsabilidade]
		- [Auditoria ambígua Humano-IA]
		- [Dificuldade em atribuir responsabilidade por erros]
		- [Caixa preta do codebase]
	- [Custo e Gerenciamento de Recursos]
		- [Custo crescente (prompts iterativos, modelos potentes)
		- [Sobrecarga metacognitiva]
	- [Comunicação com IA]
		- [Dificuldade em articular intenção (visual, abstrato)]
		- [Prompts muito concisos levam a suposições incorretas]
		- [Escolha de modelo inadequado para a tarefa]
	- [Revisão de Respostas]
		- [Dificuldade em entender/avaliar código gerado]
		- [Navegação ineficiente em listas de mensagens]
		- [Diferenciar alterações (adição, exclusão)]
		- [Rastreamento de blocos de código alterados]
		- [Saídas de modo Agent não estruturadas]
		- [Parcialidade/incompletude das respostas não explicita]
	- [Gerenciamento de Múltiplas Visualizações]
		- [Dificuldade para usuários de leitores de tela]
		- [Perda de foco e consciência situacional]
	- [Consequências da Automação]
		- [Superestimar a precisão da IA (novatos)]
		- [Comprometimento da confiança no usuário]
		- [Numbing da intencionalidade (Huxleyan dystopia)]
		- [Convergência mecanizada (homogeneização da criatividade)]
- [Benefícios e Oportunidades]
	- [Aceleração do Desenvolvimento]
		- [Prototipagem rápida e iteração]
		- [Redução do overhead de tradução]
		- [Fluxo conversacional e iterativo]
		- [Inovação acelerada e resposta ao mercado]
	- [Democratização da Criação de Software]
		- [Abstração da necessidade de sintaxe]
		- [Acessibilidade para não programadores]
		- [Redução de barreiras organizacionais]
	- [Novos paradigmas de UX em IDEs]
		- [Workspaces interativos e multimodais]
		- [Recomendações inteligentes e adaptativas]
		- [Manipulação direta de componentes de UI]
	- [Melhora no Compartilhamento de Conhecimento]
		- [Código ricamente anotado]
		- [Resumos de PRs guagem atural]
		- [Sinalização de desvios de padrões arquitetônicos]
	- [Garantia de Qualidade Automatizada]
		- [Geração e manutenção automática de testes]
		- [Integração de ferramentas de análise estática]
	- [Exploração e Onboarding de Frameworks]
		- [Ferramenta eficaz para tecnologias desconhecidas]
		- [Scaffold completo de projetos web]
	- [Suporte à Reflexão e Pensamento Crítico (Provocações)]
		- [Identificar falhas e alternativas das sugestões da IA]
		- [Estimular pensamento analítico]
		- [Promover autoconsciência e decomposição de tarefas]
	- [Acessibilidade para Usuários de Leitores de Tela]
		- [Melhora capacidades de programação]
		- [Supera lacunas de acessibilidade]
		- [Visualizações acessíveis com menos elementos de UI]
		- [Alertas sonoros para alterações de código]
	- [Recuperação do Controle e Flexibilidade]
		- [Possibilidade usar mais 'Vanilla' JS/menos bibliotecas de alto nível]
		- [Abstração do cliente ou variável de ambiente para rotear prompts]
- [Vibe Coding vs. Agentic Coding]
	- [Vibe Coding]
		- [Interação humana em loop]
		- [Fluxos de trabalhos conversacionais baseados em prompts]
		- [Foco em ideação, experimentação, exploração criativa]
		- [Autonomia de IA: Baixa a Moderada (assistente responsivo)]
		- [Planejamento: Principalmente humano-liderado]
		- [Uso de ferramentas: Geração de snippets de código]
		- [Contexto: Sensível ao contexto (16k-32k tokens)]
		- [Validação: Inspeção, teste manual, depuração via prompt]
		- [Casos de uso: Prototipagem rápida, aprendizado de tecnologia, educação]
	- [Agentic Coding]
		- [Desenvolvimento de software autônomo]
		- [Agentes orientados por metas (planejamento, execução, teste, iteração)]
		- [Intervenção humana mínima]
		- [Autonomia de IA: Moderada a alta (executor proativo)]
		- [Planejamento: Principalmente IA-liderado]
		- [Uso de ferramentas: Orquestra suíte de ferramentas (compiladores, Git, APIs)]
		- [Contexto: Persistente e sofisticado (raciocínio sobre mais informações)]
		- [Validação: Mecanismos autônomos de verificação em tempo de execução]
		- [Casos de uso: Automação empresarial, refatoração de código, CI/CD]
	- [Arquiteturas Hibridas]
		- [Interfaces de linguagem natural com pipelines de execução autônoma]
		- [Harmonizar pontos fortes para o ciclo de vida de desenvolvimento]
- [Vibe Modeling] 
	- [Definição]
		- [Processo de construir software via interação conversacional com LLM]
		- [LLM ajustado para modelagem, não codificação]
		- [Abordagem Model-Driven Vibe Coding]
	- [Processo]
		- [Usuário descreme sistema ao agente (LLM)]
		- [Agente propõe modelo (incerto)]
		- [Diálogo para refinar modelo]
		- [Especialista em modelagem pode intervir]
		- [Geração de código determinístico a partir de 'vibed models']
	- [Infraestrutura]
		- [Maneira fácil para agente cirarem/manipularem modelos]
		- [Agentes especializados para modelagem]
		- [Model Context Protocol (MCP) para interoperabilidade de ferramentas]
	- [Desafios]
		- [Tipos de conversas para validação/desambiguação]
		- [Treinamento de agentes para domínio de modelagem]
		- [Colaboração eficaz entre agentes]
		- [Avaliação da qualidade de modelos inferidos]
		- [Modelagem de outros tipos de modelos (UML, arquitetura, UI)]
		- [Adaptação a diferentes perfis de usuário]
	- [Relação com Vibe Coding]
		- [Contraponto às tendências que favorecem 'vibe coding' direto]
		- [Melhora a qualidade do sistema final]
- [Considerações Pedagógicas e Sociais]
	- [Impacto na Educação]
		- [Transforma como estudantes programam]
		- [Enfatiza depuração e teste]
		- [Prompts de estudantes avançados são mais contextuais]
		- [Necessidade de ensinar leitura de código e prompting contextualizado]
		- [Ameaça ao desenvolvimento de testes unitários]
	- [Gerenciamento de Impressão e Autoapresentação]
		- [Creators confrontam o 'social evaluation penalty' do uso de IA]
		- [Tornam o uso de IA central à performance]
		- [Estratégias para demonstrar expertise e controle]
		- [Autenticidade vs. conformidade com normas sociais]
	- [Acessibilidade e Inclusão]
		- [Novos desafios para usuários de leitores de tela]
		- [Necessidade de recursos de aprendizagem acessíveis]
		- [Recomendações de design para ferramentas inclusivas]
	- [Questões de Autoria e Propriedade Intelectual]
		- [Ambiguidade do status de propriedade intelectual do código gerado por LLM]
		- [Necessidade de declarações de licenciamento (SPDX)]
		- [Consulta a assessoria jurídica intitucional]